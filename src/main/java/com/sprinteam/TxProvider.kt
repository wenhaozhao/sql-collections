package com.sprinteam

import java.sql.*
import java.util.*
import java.util.concurrent.Executor

/**
 * 连接代理，用于支持事物嵌套
 */
class TxProvider constructor(val proxy: Connection) : Connection {
    override fun prepareStatement(sql: String?): PreparedStatement = throw UnsupportedOperationException()

    override fun prepareStatement(sql: String?, resultSetType: Int, resultSetConcurrency: Int): PreparedStatement = throw UnsupportedOperationException()

    override fun prepareStatement(sql: String?, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): PreparedStatement = throw UnsupportedOperationException()

    override fun prepareStatement(sql: String?, autoGeneratedKeys: Int): PreparedStatement = throw UnsupportedOperationException()

    override fun prepareStatement(sql: String?, columnIndexes: IntArray?): PreparedStatement = throw UnsupportedOperationException()


    override fun prepareStatement(sql: String?, columnNames: Array<out String>?): PreparedStatement = throw UnsupportedOperationException()

    override fun rollback() = throw UnsupportedOperationException()

    override fun rollback(savepoint: Savepoint?) = throw UnsupportedOperationException()

    override fun getHoldability(): Int = throw UnsupportedOperationException()

    override fun setNetworkTimeout(executor: Executor?, milliseconds: Int) = throw UnsupportedOperationException()

    override fun commit() = throw UnsupportedOperationException()

    override fun <T : Any?> unwrap(iface: Class<T>?): T = throw UnsupportedOperationException()

    override fun setTransactionIsolation(level: Int) = throw UnsupportedOperationException()

    override fun setAutoCommit(autoCommit: Boolean) = throw UnsupportedOperationException()

    override fun abort(executor: Executor?) = throw UnsupportedOperationException()

    override fun prepareCall(sql: String?): CallableStatement = throw UnsupportedOperationException()

    override fun prepareCall(sql: String?, resultSetType: Int, resultSetConcurrency: Int): CallableStatement = throw UnsupportedOperationException()

    override fun prepareCall(sql: String?, resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): CallableStatement = throw UnsupportedOperationException()

    override fun getClientInfo(name: String?): String = throw UnsupportedOperationException()

    override fun getClientInfo(): Properties = throw UnsupportedOperationException()

    override fun getAutoCommit(): Boolean = throw UnsupportedOperationException()

    override fun setCatalog(catalog: String?) = throw UnsupportedOperationException()

    override fun getWarnings(): SQLWarning = throw UnsupportedOperationException()

    override fun getCatalog(): String = throw UnsupportedOperationException()

    override fun setHoldability(holdability: Int) = throw UnsupportedOperationException()

    override fun getSchema(): String = throw UnsupportedOperationException()

    override fun isValid(timeout: Int): Boolean = throw UnsupportedOperationException()

    override fun close() = throw UnsupportedOperationException()

    override fun isClosed(): Boolean = throw UnsupportedOperationException()

    override fun createNClob(): NClob = throw UnsupportedOperationException()

    override fun createBlob(): Blob = throw UnsupportedOperationException()

    override fun createArrayOf(typeName: String?, elements: Array<out Any>?): java.sql.Array = throw UnsupportedOperationException()

    override fun setReadOnly(readOnly: Boolean) = throw UnsupportedOperationException()

    override fun isWrapperFor(iface: Class<*>?): Boolean = throw UnsupportedOperationException()

    override fun nativeSQL(sql: String?): String = throw UnsupportedOperationException()

    override fun createStruct(typeName: String?, attributes: Array<out Any>?): Struct = throw UnsupportedOperationException()

    override fun setClientInfo(name: String?, value: String?) = throw UnsupportedOperationException()

    override fun setClientInfo(properties: Properties?) = throw UnsupportedOperationException()

    override fun releaseSavepoint(savepoint: Savepoint?) = throw UnsupportedOperationException()

    override fun createClob(): Clob = throw UnsupportedOperationException()

    override fun isReadOnly(): Boolean = throw UnsupportedOperationException()

    override fun createStatement(): Statement = proxy.createStatement()

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int): Statement = throw UnsupportedOperationException()

    override fun createStatement(resultSetType: Int, resultSetConcurrency: Int, resultSetHoldability: Int): Statement = throw UnsupportedOperationException()

    override fun setSavepoint(): Savepoint = throw UnsupportedOperationException()

    override fun setSavepoint(name: String?): Savepoint = throw UnsupportedOperationException()

    override fun getTypeMap(): MutableMap<String, Class<*>> = throw UnsupportedOperationException()

    override fun clearWarnings() = throw UnsupportedOperationException()

    override fun getMetaData(): DatabaseMetaData = throw UnsupportedOperationException()

    override fun getTransactionIsolation(): Int = throw UnsupportedOperationException()

    override fun setSchema(schema: String?) = throw UnsupportedOperationException()

    override fun getNetworkTimeout(): Int = throw UnsupportedOperationException()

    override fun setTypeMap(map: MutableMap<String, Class<*>>?) = throw UnsupportedOperationException()

    override fun createSQLXML(): SQLXML = throw UnsupportedOperationException()

}